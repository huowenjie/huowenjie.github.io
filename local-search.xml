<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Shader 编程学习之路 -- 临摹</title>
    <link href="/10/10/2022/shader-learn/"/>
    <url>/10/10/2022/shader-learn/</url>
    
    <content type="html"><![CDATA[<p>本文主要是积累一些自己编写的 Shader 习题示例。主要采用 vscode + shadertoy 扩展工具来实现，使用 GLSL 语言编写，不定期更新。</p><span id="more"></span><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>本文的参考资料为：<br>1.<a href="https://thebookofshaders.com/">《The Book of Shaders》</a><br>2.<a href="https://inspirnathan.com/topics/shaders/">《Nathan Vaughn 的 shader 教程》</a></p><h2 id="程序示例"><a href="#程序示例" class="headerlink" title="程序示例"></a>程序示例</h2><h3 id="1-Piet-Mondria-Tableau-1921"><a href="#1-Piet-Mondria-Tableau-1921" class="headerlink" title="1.Piet Mondria - Tableau (1921)"></a>1.Piet Mondria - Tableau (1921)</h3><p><img src="/image/2022/shader-learn/PietMondria.png"></p><p>这个图案是该教程<a href="https://thebookofshaders.com/07/?lan=ch">形状</a>这一章节展示的示例，我将它实现以用作绘制矩形的练习，代码如下：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">vec3</span> red = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.71</span>, <span class="hljs-number">0.14</span>, <span class="hljs-number">0.15</span>);<br><span class="hljs-type">vec3</span> yellow = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.99</span>, <span class="hljs-number">0.77</span>, <span class="hljs-number">0.2</span>);<br><span class="hljs-type">vec3</span> blue = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.36</span>, <span class="hljs-number">0.6</span>);<br><span class="hljs-type">vec3</span> black = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.12</span>, <span class="hljs-number">0.14</span>, <span class="hljs-number">0.15</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 绘制矩形</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * st 当前 frag 归一化坐标</span><br><span class="hljs-comment"> * l 矩形长度</span><br><span class="hljs-comment"> * h 矩形高度</span><br><span class="hljs-comment"> * center 矩形中心点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">float</span> rect(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> l, <span class="hljs-type">float</span> h, <span class="hljs-type">vec2</span> center) &#123;<br>    <span class="hljs-type">float</span> tl = (<span class="hljs-number">1.0</span> - l) * <span class="hljs-number">0.5</span>;<br>    <span class="hljs-type">float</span> th = (<span class="hljs-number">1.0</span> - h) * <span class="hljs-number">0.5</span>;<br>    <span class="hljs-type">vec2</span> c = <span class="hljs-type">vec2</span>(center.x - <span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span> - center.y - <span class="hljs-number">0.5</span>);<br><br>    <span class="hljs-type">vec2</span> lb = <span class="hljs-built_in">step</span>(<span class="hljs-type">vec2</span>(tl + c.x, th + c.y), st);<br>    <span class="hljs-type">vec2</span> rt = <span class="hljs-built_in">step</span>(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">1.0</span> - tl + c.x, <span class="hljs-number">1.0</span> - th + c.y));<br><br>    <span class="hljs-keyword">return</span> lb.x * lb.y * rt.x* rt.y;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.96</span>, <span class="hljs-number">0.93</span>, <span class="hljs-number">0.87</span>);<br><br>    <span class="hljs-comment">// 先混合背景色和主色块</span><br>    back = <span class="hljs-built_in">mix</span>(back, red, rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, yellow, rect(st, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.975</span>, <span class="hljs-number">0.2</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, blue, rect(st, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.85</span>, <span class="hljs-number">0.95</span>)));<br><br>    <span class="hljs-comment">// 接下来是几个覆盖的黑色线条 横向</span><br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.035</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.2</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.035</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.4</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.03</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.9</span>)));<br><br>    <span class="hljs-comment">// 纵向</span><br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">0.025</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.06</span>, <span class="hljs-number">0.2</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">0.03</span>, <span class="hljs-number">1.0</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">0.03</span>, <span class="hljs-number">1.0</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.7</span>, <span class="hljs-number">0.5</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">0.03</span>, <span class="hljs-number">1.0</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.95</span>, <span class="hljs-number">0.5</span>)));<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>非常的简单，主要是矩形绘制和 mix 函数的应用。</p><h3 id="2-画圆"><a href="#2-画圆" class="headerlink" title="2.画圆"></a>2.画圆</h3><p>效果如图所示：<br><img src="/image/2022/shader-learn/Circle.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br><br>    <span class="hljs-type">float</span> len = <span class="hljs-built_in">distance</span>(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.5</span>));<br>    <span class="hljs-type">float</span> pct = <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.45</span>, <span class="hljs-number">0.5</span>, len);<br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(pct);<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>直接通过 distance 函数配合 smoothstep 绘制一个边界模糊的圆。</p><h3 id="3-画正方形（通过shaderToy这个平台）"><a href="#3-画正方形（通过shaderToy这个平台）" class="headerlink" title="3.画正方形（通过shaderToy这个平台）"></a>3.画正方形（通过shaderToy这个平台）</h3><p><img src="/image/2022/shader-learn/react.jpg"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">vec3</span> wihit = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>);<br><br>    <span class="hljs-type">float</span> pct = <span class="hljs-built_in">step</span>(<span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(st.x), <span class="hljs-built_in">abs</span>(st.y)), <span class="hljs-number">0.25</span>);<br>    back = pct * wihit + (<span class="hljs-number">1.0</span> - pct) * back;<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>绘制矩形主要运用了 max(abs(x), abs(y)) &#x3D;  r &#x2F; 2 这个关系，其中 r 为矩形边长。</p><h3 id="4-边缘模糊的圆环"><a href="#4-边缘模糊的圆环" class="headerlink" title="4.边缘模糊的圆环"></a>4.边缘模糊的圆环</h3><p><img src="/image/2022/shader-learn/CircleRing.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">vec3</span> white = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>);<br><br>    <span class="hljs-type">float</span> len = <span class="hljs-built_in">length</span>(st);<br><br>    <span class="hljs-comment">//if (len &gt; 0.2 &amp;&amp; len &lt; 0.3)</span><br>    <span class="hljs-type">float</span> pct = <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.18</span>, <span class="hljs-number">0.2</span>, len) * (<span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.28</span>, <span class="hljs-number">0.3</span>, len));<br>    back = pct * back + (<span class="hljs-number">1.0</span> - pct) * white; <br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 smoothstep 来代替 if 语句。</p><h3 id="5-奥运五环"><a href="#5-奥运五环" class="headerlink" title="5.奥运五环"></a>5.奥运五环</h3><p><img src="/image/2022/shader-learn/Olympic.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 圆环，r 为半径，offset 为圆心偏移量</span><br><span class="hljs-type">float</span> circleRing(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> r, <span class="hljs-type">vec2</span> <span class="hljs-keyword">offset</span>)<br>&#123;<br>    <span class="hljs-type">vec2</span> pos = st - <span class="hljs-keyword">offset</span>;<br>    <span class="hljs-type">float</span> len = <span class="hljs-built_in">length</span>(pos);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">smoothstep</span>(r - <span class="hljs-number">0.02</span>, r, len) * (<span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(r, r + <span class="hljs-number">0.02</span>, len));<br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-comment">// 矩形，l 为长，h为高，中心点 (0, 0)</span><br><span class="hljs-type">float</span> rect(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> l, <span class="hljs-type">float</span> h) <br>&#123;<br>    <span class="hljs-type">float</span> horizontal = <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(l - <span class="hljs-number">0.01</span>, l, <span class="hljs-built_in">abs</span>(st.x));<br>    <span class="hljs-type">float</span> vertical = <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(h - <span class="hljs-number">0.01</span>, h, <span class="hljs-built_in">abs</span>(st.y));<br>    <span class="hljs-type">float</span> sdf = horizontal * vertical;<br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> black = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">vec3</span> blue = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.8</span>);<br>    <span class="hljs-type">vec3</span> red = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.8</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>);<br>    <span class="hljs-type">vec3</span> yellow = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.9</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.1</span>);<br>    <span class="hljs-type">vec3</span> green = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.1</span>);<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-comment">// 奥运五环</span><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>), rect(st, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.3</span>));<br>    back = <span class="hljs-built_in">mix</span>(back, blue, circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.15</span>, <span class="hljs-number">0.08</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, black, circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.08</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, red, circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.15</span>, <span class="hljs-number">0.08</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, yellow, circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.08</span>, <span class="hljs-number">-0.04</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, green, circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.08</span>, <span class="hljs-number">-0.04</span>)));<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个图案主要运用 mix 混合函数来实现，由于是纯 2D 表示，所以并没有考虑深度。也可以先单纯采用距离场的方式计算出图形的位置关系，然后再混合，这样也可以得出相同的图案：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 圆环，r 为外圈半径，offset 为圆心偏移量</span><br><span class="hljs-type">float</span> circleRing(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> r, <span class="hljs-type">vec2</span> <span class="hljs-keyword">offset</span>)<br>&#123;<br>    <span class="hljs-type">vec2</span> pos = st - <span class="hljs-keyword">offset</span>;<br>    <span class="hljs-type">float</span> d = <span class="hljs-built_in">length</span>(pos);<br>    <span class="hljs-type">float</span> d1 = d - r;<br>    <span class="hljs-type">float</span> d2 = d - (r + <span class="hljs-number">0.01</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(-d1, d2);<br><br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-comment">// 矩形</span><br><span class="hljs-type">float</span> rect(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> l, <span class="hljs-type">float</span> h)<br>&#123;<br>    <span class="hljs-type">float</span> d1 = <span class="hljs-built_in">abs</span>(st.x) - l;<br>    <span class="hljs-type">float</span> d2 = <span class="hljs-built_in">abs</span>(st.y) - h;<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(d1, d2);<br><br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> black = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">vec3</span> blue = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.8</span>);<br>    <span class="hljs-type">vec3</span> red = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.8</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>);<br>    <span class="hljs-type">vec3</span> yellow = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.9</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.1</span>);<br>    <span class="hljs-type">vec3</span> green = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.1</span>);<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-type">float</span> sdf1 = rect(st, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.3</span>);<br>    <span class="hljs-type">float</span> sdf2 = circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.15</span>, <span class="hljs-number">0.08</span>));<br>    <span class="hljs-type">float</span> sdf3 = circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.08</span>));<br>    <span class="hljs-type">float</span> sdf4 = circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.15</span>, <span class="hljs-number">0.08</span>));<br>    <span class="hljs-type">float</span> sdf5 = circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.08</span>, <span class="hljs-number">-0.04</span>));<br>    <span class="hljs-type">float</span> sdf6 = circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.08</span>, <span class="hljs-number">-0.04</span>));<br><br>    <span class="hljs-comment">// 奥运五环</span><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.008</span>, sdf1));<br>    back = <span class="hljs-built_in">mix</span>(back, blue, <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.008</span>, sdf2));<br>    back = <span class="hljs-built_in">mix</span>(back, black, <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.008</span>, sdf3));<br>    back = <span class="hljs-built_in">mix</span>(back, red, <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.008</span>, sdf4));<br>    back = <span class="hljs-built_in">mix</span>(back, yellow, <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.008</span>, sdf5));<br>    back = <span class="hljs-built_in">mix</span>(back, green, <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.008</span>, sdf6));<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样更加简洁一些，更少地调用 smoothstep 这些内置函数。</p><h3 id="6-图案的关系处理"><a href="#6-图案的关系处理" class="headerlink" title="6.图案的关系处理"></a>6.图案的关系处理</h3><h4 id="6-1求交集"><a href="#6-1求交集" class="headerlink" title="6.1求交集"></a>6.1求交集</h4><p>两个图形求交集，效果如下：<br><img src="/image/2022/shader-learn/Intersection.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 圆环，r 为外圈半径，offset 为圆心偏移量</span><br><span class="hljs-type">float</span> circleRing(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> r, <span class="hljs-type">vec2</span> <span class="hljs-keyword">offset</span>)<br>&#123;<br>    <span class="hljs-type">vec2</span> pos = st - <span class="hljs-keyword">offset</span>;<br>    <span class="hljs-type">float</span> d = <span class="hljs-built_in">length</span>(pos);<br>    <span class="hljs-type">float</span> d1 = d - r;<br>    <span class="hljs-type">float</span> d2 = d - (r + <span class="hljs-number">0.04</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(-d1, d2);<br><br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-comment">// 矩形</span><br><span class="hljs-type">float</span> rect(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> l, <span class="hljs-type">float</span> h)<br>&#123;<br>    <span class="hljs-type">float</span> d1 = <span class="hljs-built_in">abs</span>(st.x) - l;<br>    <span class="hljs-type">float</span> d2 = <span class="hljs-built_in">abs</span>(st.y) - h;<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(d1, d2);<br><br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> d1 = circleRing(st, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(d1, d2);<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们分别用三种颜色表示图形，较亮的那一部分为两图形的交集。求交集使用的函数是 max。</p><h4 id="6-2求并集"><a href="#6-2求并集" class="headerlink" title="6.2求并集"></a>6.2求并集</h4><p>两个图形求交集，效果如下：<br><img src="/image/2022/shader-learn/Union.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> d1 = circleRing(st, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">min</span>(d1, d2);<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>只需要调用 min 函数即可实现。</p><h4 id="6-3求补集"><a href="#6-3求补集" class="headerlink" title="6.3求补集"></a>6.3求补集</h4><p>两个图形求交集，效果如下：<br><img src="/image/2022/shader-learn/Comp.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> d1 = circleRing(st, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = -d1;<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>直接对圆环距离场取负即可。用这个关系我们可以取矩形和环形补集的交集，可以得到如下图案：</p><p><img src="/image/2022/shader-learn/Sub.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(-d1, d2);<br></code></pre></td></tr></table></figure><h4 id="6-4XOR-异或关系"><a href="#6-4XOR-异或关系" class="headerlink" title="6.4XOR 异或关系"></a>6.4XOR 异或关系</h4><p>根据异或关系 “同 0 异 1” 的原则，我们可以推断出两个图形异或的结果为其相交部分被去除：</p><p><img src="/image/2022/shader-learn/Xor.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> d1 = circleRing(st, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">max</span>(-d1, d2), <span class="hljs-built_in">max</span>(d1, -d2));<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>分别取圆环和矩形各自的补集相交，然后将结果合并即可。用逻辑关系表示为 A xor B &#x3D; (A and not B) or (not A and B)，当然不止有这一种实现方法，读者自行探索。</p><h4 id="6-5平滑接缝"><a href="#6-5平滑接缝" class="headerlink" title="6.5平滑接缝"></a>6.5平滑接缝</h4><p>有时候我们可以通过特殊的函数将两个图形的交接处变得更平滑：</p><p><img src="/image/2022/shader-learn/Smoothxor.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// a 和 b 分别为两个图形的有向距离场，k 为平滑因子</span><br><span class="hljs-type">float</span> smin(<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b, <span class="hljs-type">float</span> k) &#123;<br>  <span class="hljs-type">float</span> h = <span class="hljs-built_in">clamp</span>(<span class="hljs-number">0.5</span> + <span class="hljs-number">0.5</span> * (b - a) / k, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">mix</span>(b, a, h) - k * h * (<span class="hljs-number">1.0</span> - h);<br>&#125;<br><br><span class="hljs-comment">// smooth max</span><br><span class="hljs-type">float</span> smax(<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b, <span class="hljs-type">float</span> k) &#123;<br>  <span class="hljs-keyword">return</span> -smin(-a, -b, k);<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> d1 = circleRing(st, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = smin(smax(-d1, d2, <span class="hljs-number">0.1</span>), smax(d1, -d2, <span class="hljs-number">0.1</span>), <span class="hljs-number">0.1</span>);<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>将原有的 max 和 min 替换为 smax 和 smin 即可实现效果。这两个函数直接取自 Nathan Vaughn 的博客 中实现的算法，数学原理暂不理解，还需要慢慢研究。</p><h4 id="6-6轴对称"><a href="#6-6轴对称" class="headerlink" title="6.6轴对称"></a>6.6轴对称</h4><p><img src="/image/2022/shader-learn/SymX.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-type">vec2</span> symX = <span class="hljs-type">vec2</span>(-st.x, st.y);<br><br>    <span class="hljs-type">float</span> d1 = circleRing(st, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = circleRing(symX, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d3 = <span class="hljs-built_in">min</span>(d1, d2);<br>    <span class="hljs-type">float</span> d4 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">max</span>(-d3, d4), <span class="hljs-built_in">max</span>(d3, -d4));<br> <br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>轴对称操作的非常简单，直接将输入坐标的 x 值取负，然后就可以得到关于 x 轴对称的图形，然后使用 min 取并集即可获得结果。还有另一种方法，直接对输入的坐标 st 的 x 值取绝对值 abs(st.x)，这样可以直接得到以下的效果：</p><p><img src="/image/2022/shader-learn/Sym.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-type">float</span> d1 = circleRing(<span class="hljs-type">vec2</span>(<span class="hljs-built_in">abs</span>(st.x), st.y), <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">max</span>(-d1, d2), <span class="hljs-built_in">max</span>(d1, -d2));<br> <br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>不过这样做会切除该图形在对称象限的那部分。</p><h3 id="7-画心形"><a href="#7-画心形" class="headerlink" title="7.画心形"></a>7.画心形</h3><p>最简单的心形我们采用 (x^2 + y^2 - 1)^3 - x^2 * y^3 &#x3D; 0 这个公式来构造距离场：</p><p><img src="/image/2022/shader-learn/Heart.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 心形 (x^2 + y^2 - 1)^3 - x^2 * y^3 = 0</span><br><span class="hljs-type">float</span> heart(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> size, <span class="hljs-type">vec2</span> <span class="hljs-keyword">offset</span>)<br>&#123;<br>    <span class="hljs-type">vec2</span> pos = st - <span class="hljs-keyword">offset</span>;<br><br>    <span class="hljs-comment">// 直接计算距离场</span><br>    <span class="hljs-type">float</span> xx = <span class="hljs-built_in">dot</span>(pos.x, pos.x);<br>    <span class="hljs-type">float</span> yy = <span class="hljs-built_in">dot</span>(pos.y, pos.y);<br>    <span class="hljs-type">float</span> yyy = pos.y * yy;<br>    <span class="hljs-type">float</span> group = xx + yy - size;<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">dot</span>(group, group) * group - xx * yyy;<br><br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> sdf = heart(st, <span class="hljs-number">0.05</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.0</span>));<br> <br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">step</span>(<span class="hljs-number">0.0</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>比较奇怪的是这个形状无法使用 smoothstep 来消除锯齿，可能是不规则图形的缘故，可能需要更高深的插值技巧，有待研究。</p><h3 id="8-五角星"><a href="#8-五角星" class="headerlink" title="8.五角星"></a>8.五角星</h3><p><img src="/image/2022/shader-learn/Star5.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 绘制五角星，同样出自 Inigo Quilez 的网站</span><br><span class="hljs-type">float</span> sdStar5(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> r, <span class="hljs-type">float</span> rf)<br>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-type">vec2</span> k1 = <span class="hljs-type">vec2</span>(<span class="hljs-number">0.809016994375</span>, <span class="hljs-number">-0.587785252292</span>);<br>    <span class="hljs-keyword">const</span> <span class="hljs-type">vec2</span> k2 = <span class="hljs-type">vec2</span>(-k1.x, k1.y);<br>    st.x = <span class="hljs-built_in">abs</span>(st.x);<br>    st -= <span class="hljs-number">2.0</span> * <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(k1, st), <span class="hljs-number">0.0</span>) * k1;<br>    st -= <span class="hljs-number">2.0</span> * <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(k2, st), <span class="hljs-number">0.0</span>) * k2;<br>    st.x = <span class="hljs-built_in">abs</span>(st.x);<br>    st.y -= r;<br>    <span class="hljs-type">vec2</span> ba = rf * <span class="hljs-type">vec2</span>(-k1.y, k1.x) - <span class="hljs-type">vec2</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-type">float</span> h = <span class="hljs-built_in">clamp</span>(<span class="hljs-built_in">dot</span>(st, ba) / <span class="hljs-built_in">dot</span>(ba, ba), <span class="hljs-number">0.0</span>, r);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">length</span>(st - ba * h) * <span class="hljs-built_in">sign</span>(st.y * ba.x - st.x * ba.y);<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x *= (iResolution.x / iResolution.y);<br>    st = <span class="hljs-number">2.0</span> * st - <span class="hljs-number">1.0</span>;<br><br>    <span class="hljs-type">float</span> sdf = sdStar5(st, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.4</span>);<br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.02</span>, sdf));<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>五角星的实现同样出自 <a href="https://iquilezles.org/articles/">IQ</a> 的博客，原理暂时没搞明白，不过有了这个实现，可以很轻松地绘制一面五星红旗：</p><p><img src="/image/2022/shader-learn/Flag.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 绘制五角星，同样出自 Inigo Quilez 的网站</span><br><span class="hljs-type">float</span> sdStar5(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> r, <span class="hljs-type">float</span> rf, <span class="hljs-type">vec2</span> <span class="hljs-keyword">offset</span>)<br>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-type">vec2</span> k1 = <span class="hljs-type">vec2</span>(<span class="hljs-number">0.809016994375</span>, <span class="hljs-number">-0.587785252292</span>);<br>    <span class="hljs-keyword">const</span> <span class="hljs-type">vec2</span> k2 = <span class="hljs-type">vec2</span>(-k1.x, k1.y);<br><br>    st -= <span class="hljs-keyword">offset</span>;<br><br>    st.x = <span class="hljs-built_in">abs</span>(st.x);<br>    st -= <span class="hljs-number">2.0</span> * <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(k1, st), <span class="hljs-number">0.0</span>) * k1;<br>    st -= <span class="hljs-number">2.0</span> * <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(k2, st), <span class="hljs-number">0.0</span>) * k2;<br>    st.x = <span class="hljs-built_in">abs</span>(st.x);<br>    st.y -= r;<br><br>    <span class="hljs-type">vec2</span> ba = rf * <span class="hljs-type">vec2</span>(-k1.y, k1.x) - <span class="hljs-type">vec2</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-type">float</span> h = <span class="hljs-built_in">clamp</span>(<span class="hljs-built_in">dot</span>(st, ba) / <span class="hljs-built_in">dot</span>(ba, ba), <span class="hljs-number">0.0</span>, r);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">length</span>(st - ba * h) * <span class="hljs-built_in">sign</span>(st.y * ba.x - st.x * ba.y);<br>&#125;<br><br><span class="hljs-comment">// 绘制矩形</span><br><span class="hljs-type">float</span> sdBox(<span class="hljs-type">vec2</span> st)<br>&#123;<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(st.x) - <span class="hljs-number">1.0</span>, <span class="hljs-built_in">abs</span>(st.y) - <span class="hljs-number">0.7</span>);<br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x *= (iResolution.x / iResolution.y);<br>    st = <span class="hljs-number">2.0</span> * st - <span class="hljs-number">1.0</span>;<br><br>    <span class="hljs-type">float</span> star1 = sdStar5(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.7</span>, <span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> star2 = sdStar5(st, <span class="hljs-number">0.06</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.35</span>, <span class="hljs-number">0.5</span>));<br>    <span class="hljs-type">float</span> star3 = sdStar5(st, <span class="hljs-number">0.06</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.3</span>, <span class="hljs-number">0.3</span>));<br>    <span class="hljs-type">float</span> star4 = sdStar5(st, <span class="hljs-number">0.06</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.3</span>, <span class="hljs-number">0.1</span>));<br>    <span class="hljs-type">float</span> star5 = sdStar5(st, <span class="hljs-number">0.06</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.35</span>, <span class="hljs-number">-0.1</span>));<br>    <span class="hljs-type">float</span> star = <span class="hljs-built_in">min</span>(star1, star2);<br>    star = <span class="hljs-built_in">min</span>(star, star3);<br>    star = <span class="hljs-built_in">min</span>(star, star4);<br>    star = <span class="hljs-built_in">min</span>(star, star5);<br><br>    <span class="hljs-type">float</span> flag = sdBox(st);<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.02</span>, flag), <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>);<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.01</span>, star));<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-线段"><a href="#9-线段" class="headerlink" title="9.线段"></a>9.线段</h3><p><img src="/image/2022/shader-learn/Line.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 线段距离场，w 为线段宽度</span><br><span class="hljs-type">float</span> line(<span class="hljs-type">vec2</span> p, <span class="hljs-type">vec2</span> a, <span class="hljs-type">vec2</span> b, <span class="hljs-type">float</span> w)<br>&#123;<br>    <span class="hljs-type">vec2</span> ap = p - a;<br>    <span class="hljs-type">vec2</span> ab = b - a;<br><br>    <span class="hljs-comment">// |t| / |ab| 结果必然小于 1.0</span><br>    <span class="hljs-type">float</span> t = <span class="hljs-built_in">clamp</span>(<span class="hljs-built_in">dot</span>(ap, ab) / <span class="hljs-built_in">dot</span>(ab, ab), <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br>    <span class="hljs-type">vec2</span> at = t * ab;<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">length</span>(ap - at);<br><br>    <span class="hljs-keyword">return</span> sdf - w;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);    <br>    <span class="hljs-type">float</span> sdf = line(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.2</span>), <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>), <span class="hljs-number">0.005</span>);<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">step</span>(<span class="hljs-number">0.0</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>利用向量的方式来求任意一点到线段的距离。</p><h3 id="10-贝赛尔曲线"><a href="#10-贝赛尔曲线" class="headerlink" title="10.贝赛尔曲线"></a>10.贝赛尔曲线</h3><p><img src="/image/2022/shader-learn/Bezier.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">float</span> dot2(<span class="hljs-type">vec2</span> v) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dot</span>(v, v);<br>&#125;<br><br><span class="hljs-comment">// 贝塞尔曲线 f(u) = p0 * (1 - u) ^ 2 + 2 * p1 * u * (1 - u) + p2 * u ^ 2</span><br><span class="hljs-comment">// A、p1 和 p2 分别三个控制点</span><br><span class="hljs-type">float</span> bezier(<span class="hljs-type">vec2</span> pos, <span class="hljs-type">vec2</span> p0, <span class="hljs-type">vec2</span> p1, <span class="hljs-type">vec2</span> p2)<br>&#123;<br>    <span class="hljs-type">vec2</span> a = p1 - p0;<br>    <span class="hljs-type">vec2</span> b = p0 - <span class="hljs-number">2.0</span> * p1 + p2;<br>    <span class="hljs-type">vec2</span> c = a * <span class="hljs-number">2.0</span>;<br>    <span class="hljs-type">vec2</span> d = p0 - pos;<br>    <span class="hljs-type">float</span> kk = <span class="hljs-number">1.0</span> / <span class="hljs-built_in">dot</span>(b, b);<br>    <span class="hljs-type">float</span> kx = kk * <span class="hljs-built_in">dot</span>(a, b);<br>    <span class="hljs-type">float</span> ky = kk * (<span class="hljs-number">2.0</span> * <span class="hljs-built_in">dot</span>(a,a) + <span class="hljs-built_in">dot</span>(d, b)) / <span class="hljs-number">3.0</span>;<br>    <span class="hljs-type">float</span> kz = kk * <span class="hljs-built_in">dot</span>(d, a);<br>    <span class="hljs-type">float</span> res = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-type">float</span> p = ky - kx * kx;<br>    <span class="hljs-type">float</span> p3 = p * p * p;<br>    <span class="hljs-type">float</span> q = kx * (<span class="hljs-number">2.0</span> * kx * kx - <span class="hljs-number">3.0</span> * ky) + kz;<br>    <span class="hljs-type">float</span> h = q * q + <span class="hljs-number">4.0</span> * p3;<br>    <span class="hljs-keyword">if</span>(h &gt;= <span class="hljs-number">0.0</span>) &#123; <br>        h = <span class="hljs-built_in">sqrt</span>(h);<br>        <span class="hljs-type">vec2</span> x = (<span class="hljs-type">vec2</span>(h, -h) - q) / <span class="hljs-number">2.0</span>;<br>        <span class="hljs-type">vec2</span> uv = <span class="hljs-built_in">sign</span>(x) * <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">abs</span>(x), <span class="hljs-type">vec2</span>(<span class="hljs-number">1.0</span> / <span class="hljs-number">3.0</span>));<br>        <span class="hljs-type">float</span> t = <span class="hljs-built_in">clamp</span>(uv.x + uv.y - kx, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br>        res = dot2(d + (c + b * t) * t);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">float</span> z = <span class="hljs-built_in">sqrt</span>(-p);<br>        <span class="hljs-type">float</span> v = <span class="hljs-built_in">acos</span>(q / (p * z * <span class="hljs-number">2.0</span>)) / <span class="hljs-number">3.0</span>;<br>        <span class="hljs-type">float</span> m = <span class="hljs-built_in">cos</span>(v);<br>        <span class="hljs-type">float</span> n = <span class="hljs-built_in">sin</span>(v) * <span class="hljs-number">1.732050808</span>;<br>        <span class="hljs-type">vec3</span>  t = <span class="hljs-built_in">clamp</span>(<span class="hljs-type">vec3</span>(m + m, -n - m, n - m) * z - kx, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br>        res = <span class="hljs-built_in">min</span>(dot2(d + (c + b * t.x) * t.x),<br>                  dot2(d + (c + b * t.y) * t.y));<br>        <span class="hljs-comment">// the third root cannot be the closest</span><br>        <span class="hljs-comment">// res = min(res,dot2(d+(c+b*t.z)*t.z));</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(res) - <span class="hljs-number">0.01</span>;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);    <br>    <span class="hljs-type">float</span> sdf = bezier(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.2</span>), <span class="hljs-type">vec2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.4</span>), <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">-0.2</span>));<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.02</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">step</span>(<span class="hljs-number">0.0</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>贝塞尔曲线的 shader 实现直接引用自 <a href="https://iquilezles.org/">Inigo Quilez’s</a> 大神的实现，其中的数学原理还需要慢慢学习研究。</p><h3 id="11-棋盘纹理"><a href="#11-棋盘纹理" class="headerlink" title="11.棋盘纹理"></a>11.棋盘纹理</h3><p><img src="/image/2022/shader-learn/Check.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">vec2</span> tile(<span class="hljs-type">vec2</span> st, <span class="hljs-type">vec2</span> zoom)<br>&#123;<br>    st *= zoom;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">fract</span>(st);<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x *= (iResolution.x / iResolution.y);<br>    st = <span class="hljs-number">4.0</span> * st;<br><br>    st = tile(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">1.0</span>));<br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-type">vec2</span> oe = <span class="hljs-built_in">step</span>(<span class="hljs-type">vec2</span>(<span class="hljs-number">0.5</span>), <span class="hljs-built_in">mod</span>(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">2.0</span>)));<br>    back = <span class="hljs-type">vec3</span>(<span class="hljs-built_in">min</span>((<span class="hljs-number">1.0</span> - <span class="hljs-built_in">min</span>(oe.x, oe.y)), <span class="hljs-built_in">max</span>(oe.y, oe.x)));<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 y &#x3D; mod(x, 2.0) 来判断奇偶性。</p><h3 id="12-随机噪声"><a href="#12-随机噪声" class="headerlink" title="12.随机噪声"></a>12.随机噪声</h3><p><img src="/image/2022/shader-learn/Noise.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">float</span> random(<span class="hljs-type">vec2</span> st)<br>&#123;<br>    <span class="hljs-type">float</span> r = <span class="hljs-built_in">fract</span>(<br>        <span class="hljs-built_in">sin</span>(<br>            <span class="hljs-built_in">dot</span>(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">10.0</span>, <span class="hljs-number">10.3</span>))<br>        ) * <span class="hljs-number">300000.0</span><br>    );<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x *= (iResolution.x / iResolution.y);<br>    st = <span class="hljs-number">2.0</span> * st;<br><br>    <span class="hljs-type">float</span> rd = random(st);<br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(rd);<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>采用 y &#x3D; fract(sin(x) * n) 来生成伪随机数。</p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shader</tag>
      
      <tag>Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

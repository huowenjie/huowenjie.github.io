<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Shader 编程学习之路 -- 临摹</title>
    <link href="/10/10/2022/shader-learn/"/>
    <url>/10/10/2022/shader-learn/</url>
    
    <content type="html"><![CDATA[<p>本文主要是积累一些自己编写的 Shader 习题示例。主要采用 vscode + shadertoy 扩展工具来实现，使用 GLSL 语言编写，不定期更新。</p><span id="more"></span><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>本文的参考资料为：<br>1.<a href="https://thebookofshaders.com/">《The Book of Shaders》</a><br>2.<a href="https://inspirnathan.com/topics/shaders/">《Nathan Vaughn 的 shader 教程》</a></p><h2 id="程序示例"><a href="#程序示例" class="headerlink" title="程序示例"></a>程序示例</h2><h3 id="1-Piet-Mondria-Tableau-1921"><a href="#1-Piet-Mondria-Tableau-1921" class="headerlink" title="1.Piet Mondria - Tableau (1921)"></a>1.Piet Mondria - Tableau (1921)</h3><p><img src="/image/2022/shader-learn/PietMondria.png"></p><p>这个图案是该教程<a href="https://thebookofshaders.com/07/?lan=ch">形状</a>这一章节展示的示例，我将它实现以用作绘制矩形的练习，代码如下：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">vec3</span> red = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.71</span>, <span class="hljs-number">0.14</span>, <span class="hljs-number">0.15</span>);<br><span class="hljs-type">vec3</span> yellow = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.99</span>, <span class="hljs-number">0.77</span>, <span class="hljs-number">0.2</span>);<br><span class="hljs-type">vec3</span> blue = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.36</span>, <span class="hljs-number">0.6</span>);<br><span class="hljs-type">vec3</span> black = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.12</span>, <span class="hljs-number">0.14</span>, <span class="hljs-number">0.15</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 绘制矩形</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * st 当前 frag 归一化坐标</span><br><span class="hljs-comment"> * l 矩形长度</span><br><span class="hljs-comment"> * h 矩形高度</span><br><span class="hljs-comment"> * center 矩形中心点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">float</span> rect(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> l, <span class="hljs-type">float</span> h, <span class="hljs-type">vec2</span> center) &#123;<br>    <span class="hljs-type">float</span> tl = (<span class="hljs-number">1.0</span> - l) * <span class="hljs-number">0.5</span>;<br>    <span class="hljs-type">float</span> th = (<span class="hljs-number">1.0</span> - h) * <span class="hljs-number">0.5</span>;<br>    <span class="hljs-type">vec2</span> c = <span class="hljs-type">vec2</span>(center.x - <span class="hljs-number">0.5</span>, <span class="hljs-number">1.0</span> - center.y - <span class="hljs-number">0.5</span>);<br><br>    <span class="hljs-type">vec2</span> lb = <span class="hljs-built_in">step</span>(<span class="hljs-type">vec2</span>(tl + c.x, th + c.y), st);<br>    <span class="hljs-type">vec2</span> rt = <span class="hljs-built_in">step</span>(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">1.0</span> - tl + c.x, <span class="hljs-number">1.0</span> - th + c.y));<br><br>    <span class="hljs-keyword">return</span> lb.x * lb.y * rt.x* rt.y;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.96</span>, <span class="hljs-number">0.93</span>, <span class="hljs-number">0.87</span>);<br><br>    <span class="hljs-comment">// 先混合背景色和主色块</span><br>    back = <span class="hljs-built_in">mix</span>(back, red, rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, yellow, rect(st, <span class="hljs-number">0.05</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.975</span>, <span class="hljs-number">0.2</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, blue, rect(st, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.85</span>, <span class="hljs-number">0.95</span>)));<br><br>    <span class="hljs-comment">// 接下来是几个覆盖的黑色线条 横向</span><br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.035</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.2</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.035</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.4</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.03</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.9</span>)));<br><br>    <span class="hljs-comment">// 纵向</span><br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">0.025</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.06</span>, <span class="hljs-number">0.2</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">0.03</span>, <span class="hljs-number">1.0</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">0.03</span>, <span class="hljs-number">1.0</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.7</span>, <span class="hljs-number">0.5</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, black, rect(st, <span class="hljs-number">0.03</span>, <span class="hljs-number">1.0</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.95</span>, <span class="hljs-number">0.5</span>)));<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>非常的简单，主要是矩形绘制和 mix 函数的应用。</p><h3 id="2-画圆"><a href="#2-画圆" class="headerlink" title="2.画圆"></a>2.画圆</h3><p>效果如图所示：<br><img src="/image/2022/shader-learn/Circle.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br><br>    <span class="hljs-type">float</span> len = <span class="hljs-built_in">distance</span>(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.5</span>));<br>    <span class="hljs-type">float</span> pct = <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.45</span>, <span class="hljs-number">0.5</span>, len);<br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(pct);<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>直接通过 distance 函数配合 smoothstep 绘制一个边界模糊的圆。</p><h3 id="3-画正方形（通过shaderToy这个平台）"><a href="#3-画正方形（通过shaderToy这个平台）" class="headerlink" title="3.画正方形（通过shaderToy这个平台）"></a>3.画正方形（通过shaderToy这个平台）</h3><p><img src="/image/2022/shader-learn/react.jpg"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">vec3</span> wihit = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>);<br><br>    <span class="hljs-type">float</span> pct = <span class="hljs-built_in">step</span>(<span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(st.x), <span class="hljs-built_in">abs</span>(st.y)), <span class="hljs-number">0.25</span>);<br>    back = pct * wihit + (<span class="hljs-number">1.0</span> - pct) * back;<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>绘制矩形主要运用了 max(abs(x), abs(y)) &#x3D;  r &#x2F; 2 这个关系，其中 r 为矩形边长。</p><h3 id="4-边缘模糊的圆环"><a href="#4-边缘模糊的圆环" class="headerlink" title="4.边缘模糊的圆环"></a>4.边缘模糊的圆环</h3><p><img src="/image/2022/shader-learn/CircleRing.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">vec3</span> white = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>);<br><br>    <span class="hljs-type">float</span> len = <span class="hljs-built_in">length</span>(st);<br><br>    <span class="hljs-comment">//if (len &gt; 0.2 &amp;&amp; len &lt; 0.3)</span><br>    <span class="hljs-type">float</span> pct = <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.18</span>, <span class="hljs-number">0.2</span>, len) * (<span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.28</span>, <span class="hljs-number">0.3</span>, len));<br>    back = pct * back + (<span class="hljs-number">1.0</span> - pct) * white; <br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 smoothstep 来代替 if 语句。</p><h3 id="5-奥运五环"><a href="#5-奥运五环" class="headerlink" title="5.奥运五环"></a>5.奥运五环</h3><p><img src="/image/2022/shader-learn/Olympic.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 圆环，r 为半径，offset 为圆心偏移量</span><br><span class="hljs-type">float</span> circleRing(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> r, <span class="hljs-type">vec2</span> <span class="hljs-keyword">offset</span>)<br>&#123;<br>    <span class="hljs-type">vec2</span> pos = st - <span class="hljs-keyword">offset</span>;<br>    <span class="hljs-type">float</span> len = <span class="hljs-built_in">length</span>(pos);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">smoothstep</span>(r - <span class="hljs-number">0.02</span>, r, len) * (<span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(r, r + <span class="hljs-number">0.02</span>, len));<br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-comment">// 矩形，l 为长，h为高，中心点 (0, 0)</span><br><span class="hljs-type">float</span> rect(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> l, <span class="hljs-type">float</span> h) <br>&#123;<br>    <span class="hljs-type">float</span> horizontal = <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(l - <span class="hljs-number">0.01</span>, l, <span class="hljs-built_in">abs</span>(st.x));<br>    <span class="hljs-type">float</span> vertical = <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(h - <span class="hljs-number">0.01</span>, h, <span class="hljs-built_in">abs</span>(st.y));<br>    <span class="hljs-type">float</span> sdf = horizontal * vertical;<br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> black = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">vec3</span> blue = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.8</span>);<br>    <span class="hljs-type">vec3</span> red = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.8</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>);<br>    <span class="hljs-type">vec3</span> yellow = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.9</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.1</span>);<br>    <span class="hljs-type">vec3</span> green = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.1</span>);<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-comment">// 奥运五环</span><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>), rect(st, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.3</span>));<br>    back = <span class="hljs-built_in">mix</span>(back, blue, circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.15</span>, <span class="hljs-number">0.08</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, black, circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.08</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, red, circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.15</span>, <span class="hljs-number">0.08</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, yellow, circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.08</span>, <span class="hljs-number">-0.04</span>)));<br>    back = <span class="hljs-built_in">mix</span>(back, green, circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.08</span>, <span class="hljs-number">-0.04</span>)));<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个图案主要运用 mix 混合函数来实现，由于是纯 2D 表示，所以并没有考虑深度。也可以先单纯采用距离场的方式计算出图形的位置关系，然后再混合，这样也可以得出相同的图案：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 圆环，r 为外圈半径，offset 为圆心偏移量</span><br><span class="hljs-type">float</span> circleRing(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> r, <span class="hljs-type">vec2</span> <span class="hljs-keyword">offset</span>)<br>&#123;<br>    <span class="hljs-type">vec2</span> pos = st - <span class="hljs-keyword">offset</span>;<br>    <span class="hljs-type">float</span> d = <span class="hljs-built_in">length</span>(pos);<br>    <span class="hljs-type">float</span> d1 = d - r;<br>    <span class="hljs-type">float</span> d2 = d - (r + <span class="hljs-number">0.01</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(-d1, d2);<br><br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-comment">// 矩形</span><br><span class="hljs-type">float</span> rect(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> l, <span class="hljs-type">float</span> h)<br>&#123;<br>    <span class="hljs-type">float</span> d1 = <span class="hljs-built_in">abs</span>(st.x) - l;<br>    <span class="hljs-type">float</span> d2 = <span class="hljs-built_in">abs</span>(st.y) - h;<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(d1, d2);<br><br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> black = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">vec3</span> blue = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.8</span>);<br>    <span class="hljs-type">vec3</span> red = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.8</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>);<br>    <span class="hljs-type">vec3</span> yellow = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.9</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.1</span>);<br>    <span class="hljs-type">vec3</span> green = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.1</span>);<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-type">float</span> sdf1 = rect(st, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.3</span>);<br>    <span class="hljs-type">float</span> sdf2 = circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.15</span>, <span class="hljs-number">0.08</span>));<br>    <span class="hljs-type">float</span> sdf3 = circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.08</span>));<br>    <span class="hljs-type">float</span> sdf4 = circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.15</span>, <span class="hljs-number">0.08</span>));<br>    <span class="hljs-type">float</span> sdf5 = circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.08</span>, <span class="hljs-number">-0.04</span>));<br>    <span class="hljs-type">float</span> sdf6 = circleRing(st, <span class="hljs-number">0.1</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.08</span>, <span class="hljs-number">-0.04</span>));<br><br>    <span class="hljs-comment">// 奥运五环</span><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.008</span>, sdf1));<br>    back = <span class="hljs-built_in">mix</span>(back, blue, <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.008</span>, sdf2));<br>    back = <span class="hljs-built_in">mix</span>(back, black, <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.008</span>, sdf3));<br>    back = <span class="hljs-built_in">mix</span>(back, red, <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.008</span>, sdf4));<br>    back = <span class="hljs-built_in">mix</span>(back, yellow, <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.008</span>, sdf5));<br>    back = <span class="hljs-built_in">mix</span>(back, green, <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.008</span>, sdf6));<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样更加简洁一些，更少地调用 smoothstep 这些内置函数。</p><h3 id="6-图案的关系处理"><a href="#6-图案的关系处理" class="headerlink" title="6.图案的关系处理"></a>6.图案的关系处理</h3><h4 id="6-1求交集"><a href="#6-1求交集" class="headerlink" title="6.1求交集"></a>6.1求交集</h4><p>两个图形求交集，效果如下：<br><img src="/image/2022/shader-learn/Intersection.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 圆环，r 为外圈半径，offset 为圆心偏移量</span><br><span class="hljs-type">float</span> circleRing(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> r, <span class="hljs-type">vec2</span> <span class="hljs-keyword">offset</span>)<br>&#123;<br>    <span class="hljs-type">vec2</span> pos = st - <span class="hljs-keyword">offset</span>;<br>    <span class="hljs-type">float</span> d = <span class="hljs-built_in">length</span>(pos);<br>    <span class="hljs-type">float</span> d1 = d - r;<br>    <span class="hljs-type">float</span> d2 = d - (r + <span class="hljs-number">0.04</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(-d1, d2);<br><br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-comment">// 矩形</span><br><span class="hljs-type">float</span> rect(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> l, <span class="hljs-type">float</span> h)<br>&#123;<br>    <span class="hljs-type">float</span> d1 = <span class="hljs-built_in">abs</span>(st.x) - l;<br>    <span class="hljs-type">float</span> d2 = <span class="hljs-built_in">abs</span>(st.y) - h;<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(d1, d2);<br><br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> d1 = circleRing(st, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(d1, d2);<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们分别用三种颜色表示图形，较亮的那一部分为两图形的交集。求交集使用的函数是 max。</p><h4 id="6-2求并集"><a href="#6-2求并集" class="headerlink" title="6.2求并集"></a>6.2求并集</h4><p>两个图形求交集，效果如下：<br><img src="/image/2022/shader-learn/Union.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> d1 = circleRing(st, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">min</span>(d1, d2);<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>只需要调用 min 函数即可实现。</p><h4 id="6-3求补集"><a href="#6-3求补集" class="headerlink" title="6.3求补集"></a>6.3求补集</h4><p>两个图形求交集，效果如下：<br><img src="/image/2022/shader-learn/Comp.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> d1 = circleRing(st, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = -d1;<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>直接对圆环距离场取负即可。用这个关系我们可以取矩形和环形补集的交集，可以得到如下图案：</p><p><img src="/image/2022/shader-learn/Sub.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(-d1, d2);<br></code></pre></td></tr></table></figure><h4 id="6-4XOR-异或关系"><a href="#6-4XOR-异或关系" class="headerlink" title="6.4XOR 异或关系"></a>6.4XOR 异或关系</h4><p>根据异或关系 “同 0 异 1” 的原则，我们可以推断出两个图形异或的结果为其相交部分被去除：</p><p><img src="/image/2022/shader-learn/Xor.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> d1 = circleRing(st, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">max</span>(-d1, d2), <span class="hljs-built_in">max</span>(d1, -d2));<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>分别取圆环和矩形各自的补集相交，然后将结果合并即可。用逻辑关系表示为 A xor B &#x3D; (A and not B) or (not A and B)，当然不止有这一种实现方法，读者自行探索。</p><h4 id="6-5平滑接缝"><a href="#6-5平滑接缝" class="headerlink" title="6.5平滑接缝"></a>6.5平滑接缝</h4><p>有时候我们可以通过特殊的函数将两个图形的交接处变得更平滑：</p><p><img src="/image/2022/shader-learn/Smoothxor.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// a 和 b 分别为两个图形的有向距离场，k 为平滑因子</span><br><span class="hljs-type">float</span> smin(<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b, <span class="hljs-type">float</span> k) &#123;<br>  <span class="hljs-type">float</span> h = <span class="hljs-built_in">clamp</span>(<span class="hljs-number">0.5</span> + <span class="hljs-number">0.5</span> * (b - a) / k, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">mix</span>(b, a, h) - k * h * (<span class="hljs-number">1.0</span> - h);<br>&#125;<br><br><span class="hljs-comment">// smooth max</span><br><span class="hljs-type">float</span> smax(<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b, <span class="hljs-type">float</span> k) &#123;<br>  <span class="hljs-keyword">return</span> -smin(-a, -b, k);<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> d1 = circleRing(st, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = smin(smax(-d1, d2, <span class="hljs-number">0.1</span>), smax(d1, -d2, <span class="hljs-number">0.1</span>), <span class="hljs-number">0.1</span>);<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>将原有的 max 和 min 替换为 smax 和 smin 即可实现效果。这两个函数直接取自 Nathan Vaughn 的博客 中实现的算法，数学原理暂不理解，还需要慢慢研究。</p><h4 id="6-6轴对称"><a href="#6-6轴对称" class="headerlink" title="6.6轴对称"></a>6.6轴对称</h4><p><img src="/image/2022/shader-learn/SymX.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-type">vec2</span> symX = <span class="hljs-type">vec2</span>(-st.x, st.y);<br><br>    <span class="hljs-type">float</span> d1 = circleRing(st, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = circleRing(symX, <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d3 = <span class="hljs-built_in">min</span>(d1, d2);<br>    <span class="hljs-type">float</span> d4 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">max</span>(-d3, d4), <span class="hljs-built_in">max</span>(d3, -d4));<br> <br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>轴对称操作的非常简单，直接将输入坐标的 x 值取负，然后就可以得到关于 x 轴对称的图形，然后使用 min 取并集即可获得结果。还有另一种方法，直接对输入的坐标 st 的 x 值取绝对值 abs(st.x)，这样可以直接得到以下的效果：</p><p><img src="/image/2022/shader-learn/Sym.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-type">float</span> d1 = circleRing(<span class="hljs-type">vec2</span>(<span class="hljs-built_in">abs</span>(st.x), st.y), <span class="hljs-number">0.2</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> d2 = rect(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>);<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">max</span>(-d1, d2), <span class="hljs-built_in">max</span>(d1, -d2));<br> <br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d1));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, d2));<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.005</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>不过这样做会切除该图形在对称象限的那部分。</p><h3 id="7-画心形"><a href="#7-画心形" class="headerlink" title="7.画心形"></a>7.画心形</h3><p>最简单的心形我们采用 (x^2 + y^2 - 1)^3 - x^2 * y^3 &#x3D; 0 这个公式来构造距离场：</p><p><img src="/image/2022/shader-learn/Heart.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 心形 (x^2 + y^2 - 1)^3 - x^2 * y^3 = 0</span><br><span class="hljs-type">float</span> heart(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> size, <span class="hljs-type">vec2</span> <span class="hljs-keyword">offset</span>)<br>&#123;<br>    <span class="hljs-type">vec2</span> pos = st - <span class="hljs-keyword">offset</span>;<br><br>    <span class="hljs-comment">// 直接计算距离场</span><br>    <span class="hljs-type">float</span> xx = <span class="hljs-built_in">dot</span>(pos.x, pos.x);<br>    <span class="hljs-type">float</span> yy = <span class="hljs-built_in">dot</span>(pos.y, pos.y);<br>    <span class="hljs-type">float</span> yyy = pos.y * yy;<br>    <span class="hljs-type">float</span> group = xx + yy - size;<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">dot</span>(group, group) * group - xx * yyy;<br><br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> sdf = heart(st, <span class="hljs-number">0.05</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">0.0</span>));<br> <br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">step</span>(<span class="hljs-number">0.0</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>比较奇怪的是这个形状无法使用 smoothstep 来消除锯齿，可能是不规则图形的缘故，可能需要更高深的插值技巧，有待研究。</p><h3 id="8-五角星"><a href="#8-五角星" class="headerlink" title="8.五角星"></a>8.五角星</h3><p><img src="/image/2022/shader-learn/Star5.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 绘制五角星，同样出自 Inigo Quilez 的网站</span><br><span class="hljs-type">float</span> sdStar5(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> r, <span class="hljs-type">float</span> rf)<br>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-type">vec2</span> k1 = <span class="hljs-type">vec2</span>(<span class="hljs-number">0.809016994375</span>, <span class="hljs-number">-0.587785252292</span>);<br>    <span class="hljs-keyword">const</span> <span class="hljs-type">vec2</span> k2 = <span class="hljs-type">vec2</span>(-k1.x, k1.y);<br>    st.x = <span class="hljs-built_in">abs</span>(st.x);<br>    st -= <span class="hljs-number">2.0</span> * <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(k1, st), <span class="hljs-number">0.0</span>) * k1;<br>    st -= <span class="hljs-number">2.0</span> * <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(k2, st), <span class="hljs-number">0.0</span>) * k2;<br>    st.x = <span class="hljs-built_in">abs</span>(st.x);<br>    st.y -= r;<br>    <span class="hljs-type">vec2</span> ba = rf * <span class="hljs-type">vec2</span>(-k1.y, k1.x) - <span class="hljs-type">vec2</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-type">float</span> h = <span class="hljs-built_in">clamp</span>(<span class="hljs-built_in">dot</span>(st, ba) / <span class="hljs-built_in">dot</span>(ba, ba), <span class="hljs-number">0.0</span>, r);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">length</span>(st - ba * h) * <span class="hljs-built_in">sign</span>(st.y * ba.x - st.x * ba.y);<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x *= (iResolution.x / iResolution.y);<br>    st = <span class="hljs-number">2.0</span> * st - <span class="hljs-number">1.0</span>;<br><br>    <span class="hljs-type">float</span> sdf = sdStar5(st, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.4</span>);<br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.02</span>, sdf));<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>五角星的实现同样出自 <a href="https://iquilezles.org/articles/">IQ</a> 的博客，原理暂时没搞明白，不过有了这个实现，可以很轻松地绘制一面五星红旗：</p><p><img src="/image/2022/shader-learn/Flag.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 绘制五角星，同样出自 Inigo Quilez 的网站</span><br><span class="hljs-type">float</span> sdStar5(<span class="hljs-type">vec2</span> st, <span class="hljs-type">float</span> r, <span class="hljs-type">float</span> rf, <span class="hljs-type">vec2</span> <span class="hljs-keyword">offset</span>)<br>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-type">vec2</span> k1 = <span class="hljs-type">vec2</span>(<span class="hljs-number">0.809016994375</span>, <span class="hljs-number">-0.587785252292</span>);<br>    <span class="hljs-keyword">const</span> <span class="hljs-type">vec2</span> k2 = <span class="hljs-type">vec2</span>(-k1.x, k1.y);<br><br>    st -= <span class="hljs-keyword">offset</span>;<br><br>    st.x = <span class="hljs-built_in">abs</span>(st.x);<br>    st -= <span class="hljs-number">2.0</span> * <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(k1, st), <span class="hljs-number">0.0</span>) * k1;<br>    st -= <span class="hljs-number">2.0</span> * <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(k2, st), <span class="hljs-number">0.0</span>) * k2;<br>    st.x = <span class="hljs-built_in">abs</span>(st.x);<br>    st.y -= r;<br><br>    <span class="hljs-type">vec2</span> ba = rf * <span class="hljs-type">vec2</span>(-k1.y, k1.x) - <span class="hljs-type">vec2</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-type">float</span> h = <span class="hljs-built_in">clamp</span>(<span class="hljs-built_in">dot</span>(st, ba) / <span class="hljs-built_in">dot</span>(ba, ba), <span class="hljs-number">0.0</span>, r);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">length</span>(st - ba * h) * <span class="hljs-built_in">sign</span>(st.y * ba.x - st.x * ba.y);<br>&#125;<br><br><span class="hljs-comment">// 绘制矩形</span><br><span class="hljs-type">float</span> sdBox(<span class="hljs-type">vec2</span> st)<br>&#123;<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(st.x) - <span class="hljs-number">1.0</span>, <span class="hljs-built_in">abs</span>(st.y) - <span class="hljs-number">0.7</span>);<br>    <span class="hljs-keyword">return</span> sdf;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x *= (iResolution.x / iResolution.y);<br>    st = <span class="hljs-number">2.0</span> * st - <span class="hljs-number">1.0</span>;<br><br>    <span class="hljs-type">float</span> star1 = sdStar5(st, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.7</span>, <span class="hljs-number">0.2</span>));<br>    <span class="hljs-type">float</span> star2 = sdStar5(st, <span class="hljs-number">0.06</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.35</span>, <span class="hljs-number">0.5</span>));<br>    <span class="hljs-type">float</span> star3 = sdStar5(st, <span class="hljs-number">0.06</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.3</span>, <span class="hljs-number">0.3</span>));<br>    <span class="hljs-type">float</span> star4 = sdStar5(st, <span class="hljs-number">0.06</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.3</span>, <span class="hljs-number">0.1</span>));<br>    <span class="hljs-type">float</span> star5 = sdStar5(st, <span class="hljs-number">0.06</span>, <span class="hljs-number">0.4</span>, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.35</span>, <span class="hljs-number">-0.1</span>));<br>    <span class="hljs-type">float</span> star = <span class="hljs-built_in">min</span>(star1, star2);<br>    star = <span class="hljs-built_in">min</span>(star, star3);<br>    star = <span class="hljs-built_in">min</span>(star, star4);<br>    star = <span class="hljs-built_in">min</span>(star, star5);<br><br>    <span class="hljs-type">float</span> flag = sdBox(st);<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.02</span>, flag), <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>);<br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.01</span>, star));<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-线段"><a href="#9-线段" class="headerlink" title="9.线段"></a>9.线段</h3><p><img src="/image/2022/shader-learn/Line.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 线段距离场，w 为线段宽度</span><br><span class="hljs-type">float</span> line(<span class="hljs-type">vec2</span> p, <span class="hljs-type">vec2</span> a, <span class="hljs-type">vec2</span> b, <span class="hljs-type">float</span> w)<br>&#123;<br>    <span class="hljs-type">vec2</span> ap = p - a;<br>    <span class="hljs-type">vec2</span> ab = b - a;<br><br>    <span class="hljs-comment">// |t| / |ab| 结果必然小于 1.0</span><br>    <span class="hljs-type">float</span> t = <span class="hljs-built_in">clamp</span>(<span class="hljs-built_in">dot</span>(ap, ab) / <span class="hljs-built_in">dot</span>(ab, ab), <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br>    <span class="hljs-type">vec2</span> at = t * ab;<br>    <span class="hljs-type">float</span> sdf = <span class="hljs-built_in">length</span>(ap - at);<br><br>    <span class="hljs-keyword">return</span> sdf - w;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);    <br>    <span class="hljs-type">float</span> sdf = line(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.2</span>), <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>), <span class="hljs-number">0.005</span>);<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">step</span>(<span class="hljs-number">0.0</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>利用向量的方式来求任意一点到线段的距离。</p><h3 id="10-贝赛尔曲线"><a href="#10-贝赛尔曲线" class="headerlink" title="10.贝赛尔曲线"></a>10.贝赛尔曲线</h3><p><img src="/image/2022/shader-learn/Bezier.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">float</span> dot2(<span class="hljs-type">vec2</span> v) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">dot</span>(v, v);<br>&#125;<br><br><span class="hljs-comment">// 贝塞尔曲线 f(u) = p0 * (1 - u) ^ 2 + 2 * p1 * u * (1 - u) + p2 * u ^ 2</span><br><span class="hljs-comment">// A、p1 和 p2 分别三个控制点</span><br><span class="hljs-type">float</span> bezier(<span class="hljs-type">vec2</span> pos, <span class="hljs-type">vec2</span> p0, <span class="hljs-type">vec2</span> p1, <span class="hljs-type">vec2</span> p2)<br>&#123;<br>    <span class="hljs-type">vec2</span> a = p1 - p0;<br>    <span class="hljs-type">vec2</span> b = p0 - <span class="hljs-number">2.0</span> * p1 + p2;<br>    <span class="hljs-type">vec2</span> c = a * <span class="hljs-number">2.0</span>;<br>    <span class="hljs-type">vec2</span> d = p0 - pos;<br>    <span class="hljs-type">float</span> kk = <span class="hljs-number">1.0</span> / <span class="hljs-built_in">dot</span>(b, b);<br>    <span class="hljs-type">float</span> kx = kk * <span class="hljs-built_in">dot</span>(a, b);<br>    <span class="hljs-type">float</span> ky = kk * (<span class="hljs-number">2.0</span> * <span class="hljs-built_in">dot</span>(a,a) + <span class="hljs-built_in">dot</span>(d, b)) / <span class="hljs-number">3.0</span>;<br>    <span class="hljs-type">float</span> kz = kk * <span class="hljs-built_in">dot</span>(d, a);<br>    <span class="hljs-type">float</span> res = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-type">float</span> p = ky - kx * kx;<br>    <span class="hljs-type">float</span> p3 = p * p * p;<br>    <span class="hljs-type">float</span> q = kx * (<span class="hljs-number">2.0</span> * kx * kx - <span class="hljs-number">3.0</span> * ky) + kz;<br>    <span class="hljs-type">float</span> h = q * q + <span class="hljs-number">4.0</span> * p3;<br>    <span class="hljs-keyword">if</span>(h &gt;= <span class="hljs-number">0.0</span>) &#123; <br>        h = <span class="hljs-built_in">sqrt</span>(h);<br>        <span class="hljs-type">vec2</span> x = (<span class="hljs-type">vec2</span>(h, -h) - q) / <span class="hljs-number">2.0</span>;<br>        <span class="hljs-type">vec2</span> uv = <span class="hljs-built_in">sign</span>(x) * <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">abs</span>(x), <span class="hljs-type">vec2</span>(<span class="hljs-number">1.0</span> / <span class="hljs-number">3.0</span>));<br>        <span class="hljs-type">float</span> t = <span class="hljs-built_in">clamp</span>(uv.x + uv.y - kx, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br>        res = dot2(d + (c + b * t) * t);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">float</span> z = <span class="hljs-built_in">sqrt</span>(-p);<br>        <span class="hljs-type">float</span> v = <span class="hljs-built_in">acos</span>(q / (p * z * <span class="hljs-number">2.0</span>)) / <span class="hljs-number">3.0</span>;<br>        <span class="hljs-type">float</span> m = <span class="hljs-built_in">cos</span>(v);<br>        <span class="hljs-type">float</span> n = <span class="hljs-built_in">sin</span>(v) * <span class="hljs-number">1.732050808</span>;<br>        <span class="hljs-type">vec3</span>  t = <span class="hljs-built_in">clamp</span>(<span class="hljs-type">vec3</span>(m + m, -n - m, n - m) * z - kx, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br>        res = <span class="hljs-built_in">min</span>(dot2(d + (c + b * t.x) * t.x),<br>                  dot2(d + (c + b * t.y) * t.y));<br>        <span class="hljs-comment">// the third root cannot be the closest</span><br>        <span class="hljs-comment">// res = min(res,dot2(d+(c+b*t.z)*t.z));</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(res) - <span class="hljs-number">0.01</span>;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x = st.x * (iResolution.x / iResolution.y);<br>    st -= <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);    <br>    <span class="hljs-type">float</span> sdf = bezier(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">-0.2</span>), <span class="hljs-type">vec2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.4</span>), <span class="hljs-type">vec2</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">-0.2</span>));<br><br>    back = <span class="hljs-built_in">mix</span>(back, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.02</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>), <span class="hljs-number">1.0</span> - <span class="hljs-built_in">step</span>(<span class="hljs-number">0.0</span>, sdf));<br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>贝塞尔曲线的 shader 实现直接引用自 <a href="https://iquilezles.org/">Inigo Quilez’s</a> 大神的实现，其中的数学原理还需要慢慢学习研究。</p><h3 id="11-棋盘纹理"><a href="#11-棋盘纹理" class="headerlink" title="11.棋盘纹理"></a>11.棋盘纹理</h3><p><img src="/image/2022/shader-learn/Check.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">vec2</span> tile(<span class="hljs-type">vec2</span> st, <span class="hljs-type">vec2</span> zoom)<br>&#123;<br>    st *= zoom;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">fract</span>(st);<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x *= (iResolution.x / iResolution.y);<br>    st = <span class="hljs-number">4.0</span> * st;<br><br>    st = tile(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">1.0</span>));<br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-type">vec2</span> oe = <span class="hljs-built_in">step</span>(<span class="hljs-type">vec2</span>(<span class="hljs-number">0.5</span>), <span class="hljs-built_in">mod</span>(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">2.0</span>)));<br>    back = <span class="hljs-type">vec3</span>(<span class="hljs-built_in">min</span>((<span class="hljs-number">1.0</span> - <span class="hljs-built_in">min</span>(oe.x, oe.y)), <span class="hljs-built_in">max</span>(oe.y, oe.x)));<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 y &#x3D; mod(x, 2.0) 来判断奇偶性。</p><h3 id="12-随机噪声"><a href="#12-随机噪声" class="headerlink" title="12.随机噪声"></a>12.随机噪声</h3><p><img src="/image/2022/shader-learn/Noise.png"></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">float</span> random(<span class="hljs-type">vec2</span> st)<br>&#123;<br>    <span class="hljs-type">float</span> r = <span class="hljs-built_in">fract</span>(<br>        <span class="hljs-built_in">sin</span>(<br>            <span class="hljs-built_in">dot</span>(st, <span class="hljs-type">vec2</span>(<span class="hljs-number">10.0</span>, <span class="hljs-number">10.3</span>))<br>        ) * <span class="hljs-number">300000.0</span><br>    );<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-type">void</span> mainImage(<span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> fragColor, <span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> fragCoord)<br>&#123;<br>    <span class="hljs-type">vec2</span> st = fragCoord / iResolution.xy;<br>    st.x *= (iResolution.x / iResolution.y);<br>    st = <span class="hljs-number">2.0</span> * st;<br><br>    <span class="hljs-type">float</span> rd = random(st);<br>    <span class="hljs-type">vec3</span> back = <span class="hljs-type">vec3</span>(rd);<br><br>    fragColor = <span class="hljs-type">vec4</span>(back, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>采用 y &#x3D; fract(sin(x) * n) 来生成伪随机数。</p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Programming</tag>
      
      <tag>Shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux GCC 常用的编译、链接选项用法说明</title>
    <link href="/09/30/2020/linux-gcc-opt/"/>
    <url>/09/30/2020/linux-gcc-opt/</url>
    
    <content type="html"><![CDATA[<p>GCC 的命令的权威解释还是要查询<a href="https://gcc.gnu.org/">官方网站</a>，同时一些链接选项不方便在网站上查询可以利用操作系统的 man 指令来查询（比如 man ld），这里记录一些常用选项，不定时更新。</p><span id="more"></span><h2 id="最常用的选项"><a href="#最常用的选项" class="headerlink" title="最常用的选项"></a>最常用的选项</h2><ul><li><p>-o file 输出目标文件</p></li><li><p>-E 将源文件进行预处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">gcc -E test.c -o test.i<br></code></pre></td></tr></table></figure></li><li><p>-S 将源文件进行汇编处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">gcc -S test.c -o test.s<br></code></pre></td></tr></table></figure></li><li><p>-c 编译源文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">gcc -c test.c -o test.o<br></code></pre></td></tr></table></figure></li><li><p>最终链接步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">gcc test1.o test2.o test3.o -o <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure></li><li><p>-Wall 打开所有的警告</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">gcc -c test.c -Wall -o <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure></li><li><p>-O打开优化选项</p></li><li><p>-O0 （默认）减少编译时间，生成 debug 级别的结果</p></li><li><p>-O1&#x2F;O2&#x2F;O3 优化级别逐级上升，一般 release 版本的优化等级都会采用 O2 级别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">gcc -c test.c -O2 -o <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure></li><li><p>-g 生成当前系统本地格式化的调试信息， GDB 可识别并调试</p></li><li><p>-ggdb 专门为 gdb 生成调试信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">gcc test.c -o <span class="hljs-built_in">test</span> -g<br>gdb <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure></li><li><p>-shared 生成一个可执行文件可以动态链接的共享库，这是个链接选项，编译生成共享库的目标文件的源文件时通常需要添加编译选项 -fpic</p></li><li><p>-fpic 生成位置无关代码，在编译共享库的目标文件时使用，这是一个编译选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">gcc -c test.c -o test.o -fpic<br>gcc -shared -o libtest.so test.o<br></code></pre></td></tr></table></figure></li><li><p>-I(大写 i)  （-Idir 或者 -I dir）添加头文件搜索目录, 这是一个编译选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">test.c 包含 test.h, test.h 位于./inc 中<br>gcc -c test.c -o test.o -I inc<br></code></pre></td></tr></table></figure></li><li><p>-l(小写L) （-llib 或者 -l lib）执行链接时的共享库名称，如当前有一个共享库 libcshare.so, 那么链接命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs BASH">gcc test.c -o <span class="hljs-built_in">test</span> -lcshare<br>或<br>gcc test.c -o <span class="hljs-built_in">test</span> -l cshare<br></code></pre></td></tr></table></figure><p>如果当前链接目录下同时存在相同名称的共享库和静态库，比如libcshare.so、libcshare.a，在不加任何选项的情况下，编译器优先选择链接共享库，除非添加-static。</p></li><li><p>-L （-Ldir）添加链接时共享库搜索目录；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">gcc test.c -o <span class="hljs-built_in">test</span> -lcshare -L/xx/xx<br></code></pre></td></tr></table></figure><p>-std&#x3D; 选择适配的 C&#x2F;C++ 标准版本，可选的有 c89&#x2F;c90&#x2F;c99&#x2F;c11 等；C++有c++98&#x2F;c++11&#x2F;c++14等等。</p></li></ul><h2 id="其他常用选项"><a href="#其他常用选项" class="headerlink" title="其他常用选项"></a>其他常用选项</h2><h3 id="依赖选项"><a href="#依赖选项" class="headerlink" title="依赖选项"></a>依赖选项</h3><ul><li>-M 为 GNU make 输出显式依赖规则，包含标准库头文件及系统头文件</li><li>-MM 类似于 -M, 但是只会包含当前工程的头文件依赖</li><li>-MF file 把依赖结果写入到 file<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs BASH">gcc -M test.c -Ixxx/xxx<br>gcc -MM test.c -Ixxx/xxx<br>gcc -MM test.c -Ixxx/xxx -MF test.d<br></code></pre></td></tr></table></figure></li></ul><p>然后查看依赖文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-built_in">cat</span> test.d<br>test.o: test.c xxx/xxx/test.h<br></code></pre></td></tr></table></figure><h3 id="常规符号导出选项"><a href="#常规符号导出选项" class="headerlink" title="常规符号导出选项"></a>常规符号导出选项</h3><ul><li>-Wl,-Bsymbolic 优先使用本地符号, 防止链接当前共享库的应用程序中的符号覆盖当前共享库中同名的符号</li><li>-Wl,-soname,libtest.so.1 设置共享库的 SONAME 为 libtest.so.1，readelf -d libtest.so 可以查看共享库的 SONAME</li><li>-Wl,-rpath&#x3D;&#x2F;xxx&#x2F;xxx 设置运行时共享库搜索目录</li><li>-Wl,-rpath&#x3D;. 设置运行时的共享库搜索目录优先选择当前目录</li><li>-Wl,–version-script&#x3D;test.map 控制共享库的导出符号</li></ul><p>符号表的形式为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs BASH">VER_1 &#123;<br>　　global:<br>　　　　testApi1;<br>　　　　testApi2;<br>　　　　testApi3;<br>　　<span class="hljs-built_in">local</span>:<br>　　　　*;<br>&#125;;<br> <br>VER_2 &#123;<br>　　global:<br>　　　　test4;<br>&#125; VER_1; <span class="hljs-comment">#依赖于版本1</span><br></code></pre></td></tr></table></figure><p>如果只需要控制符号表，可以写成如下形式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs BASH">&#123;<br>　　global:<br>　　　　testApi1;<br>　　　　testApi2;<br>　　　　testApi3;<br>　　<span class="hljs-built_in">local</span>:<br>     *;          <br>&#125;；<br></code></pre></td></tr></table></figure><ul><li>-Wl,–retain-symbols-file&#x3D;test.sym 控制静态库的导出符号</li></ul><p>test.sym 的格式如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs BASH">testApi1<br>testApi2<br>testApi3<br></code></pre></td></tr></table></figure><p>创建共享库时，添加以上链接选项 可以同时控制静态库导出符号和共享库导出符号，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">gcc test1.o test2.o test3.o test4.o -o libtest.so -shared -Wl,--version-script=test.map,--retain-symbols-file=test.sym<br></code></pre></td></tr></table></figure><h3 id="另一种控制符号导出的方式-fvisibility"><a href="#另一种控制符号导出的方式-fvisibility" class="headerlink" title="另一种控制符号导出的方式 -fvisibility"></a>另一种控制符号导出的方式 -fvisibility</h3><p>这里介绍另一种控制符号导出的方式 -fvisibility&#x3D;[default|internal|hidden|protected]。</p><p>如果要公开你的接口或者 API，那么就需要将 <strong>attribute</strong> ((visibility (“xxxxxx”))) 放在你需要公开的结构、类或者函数声明中，然后在编译选项中增加 -fvisibility&#x3D;xxxx(可选的项有 default、internal、hidden 和 protected)。</p><p>举个例子，如果编译选项中添加 -fvisibility&#x3D;hidden ，那么所有被声明为 <strong>attribute</strong> ((visibility (“hidden”))) 符号都将被隐藏，其他的应用程序或者共享库在链接本库的时候会报出类似于“对 xxx 未定义的引用……”这样的错误；如果想要导出符号，则需要给符号以 <strong>attribute</strong> ((visibility (“default”))) </p><p>这样的声明，这样应用程序或者其他的共享库在链接本库时就会找到导出的符号，可以正确链接。<br>以下是伪码示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">if</span> __GNUC__ &gt;= 4</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> EXP_DEF __attribute__ ((visibility (<span class="hljs-string">&quot;default&quot;</span>)))</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> IMP_DEF __attribute__ ((visibility (<span class="hljs-string">&quot;hidden&quot;</span>)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> EXP_DEF</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> IMP_DEF</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br> <br><span class="hljs-comment">// 这是 C 风格的导出函数</span><br><span class="hljs-function">EXP_DEF <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br> <br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br> <br><span class="hljs-comment">// C++ 导出类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EXP_DEF</span> person<br>&#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-built_in">person</span>(<span class="hljs-type">int</span> a);<br>    ……<br>&#125;<br></code></pre></td></tr></table></figure><p>对于其他选项，由于不是特别常用而且笔者精力有限，不做过多总结，读者可以查阅 gcc 的官方文档或者以下的参考资料来学习：</p><p>更多参考资料，见<a href="https://gcc.gnu.org/wiki/Visibility">官方文档</a></p><h3 id="编译器字符集编码的控制"><a href="#编译器字符集编码的控制" class="headerlink" title="编译器字符集编码的控制"></a>编译器字符集编码的控制</h3><p>假设我们当前的源文件是 GBK 编码，但是我们想要让应用程序在运行时以 UTF-8 编码来显示中文，可以在编译原文件时输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">CFLG += -finput-charset=gbk<br>CFLG += -fexec-charset=utf-8gcc -c test.c -O2 -o <span class="hljs-built_in">test</span> $(CFLG)<br></code></pre></td></tr></table></figure><p>这样，程序在编译时会将源文件进行转码操作，然后运行时就会将中文字符以 UTF-8 的方式来呈现。</p><h3 id="应用程序和共享库间接依赖问题"><a href="#应用程序和共享库间接依赖问题" class="headerlink" title="应用程序和共享库间接依赖问题"></a>应用程序和共享库间接依赖问题</h3><p>我想经常在linux下编译应用程序的朋友必定会遇到过这样的问题：  </p><blockquote><p>在编译应用程序时，程序所依赖的共享库可能会依赖另一个共享库。  </p></blockquote><p>在没有经过适当的处理的情况下，最终链接应用程序时链接器极有可能会报出找不到依赖共享库（&#x2F;usr&#x2F;bin&#x2F;ld: warning: xxx.so, needby xxx.so, not found，try using -rpath or -rpath-link） 以及  <em><strong>未定义的引用</strong></em>（&#x2F;usr&#x2F;bin&#x2F;ld: xxx.so: undefined reference to ‘xxx’）这样的错误。</p><p>现在我首先在这里复盘一下该问题，我的开发平台是 Ubuntu-Server 20.04.3 LTS-x86_64，gcc version 9.3.0。 </p><p>假设当前项目有三个目标 libalib.so、libblib.so 以及可执行程序 main，它们的源文件和头文件分别为 alib.c&#x2F;alib.h、blib.c&#x2F;blib.h、main.c，其中，main 依赖于 blib，blib 依赖于 alib，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*--------------------libalib.so--------------------*/</span><br> <br><span class="hljs-comment">/* alib.h */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ALIB_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ALIB_H</span><br>  <br><span class="hljs-type">int</span> <span class="hljs-title function_">afunc</span><span class="hljs-params">()</span>;<br>  <br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <br><span class="hljs-comment">/* alib.c */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;alib.h&quot;</span></span><br>  <br><span class="hljs-type">int</span> <span class="hljs-title function_">afunc</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;<br>&#125;<br>  <br><span class="hljs-comment">/*--------------------libblib.so--------------------*/</span><br>  <br><span class="hljs-comment">/* blib.h */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> BLIB_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BLIB_H</span><br>  <br><span class="hljs-type">int</span> <span class="hljs-title function_">bfunc</span><span class="hljs-params">()</span>;<br>  <br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <br><span class="hljs-comment">/* blib.c */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;alib.h&quot;</span></span><br>  <br><span class="hljs-type">int</span> <span class="hljs-title function_">bfunc</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> afunc();<br>&#125;<br>  <br><span class="hljs-comment">/*----------------------main---------------------*/</span><br>  <br><span class="hljs-comment">/* main.c */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;blib.h&quot;</span></span><br>  <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = %d\n&quot;</span>, bfunc());<br>&#125;<br>  <br><span class="hljs-comment">/*----------------------Makefile---------------------*/</span><br>  <br>CC := gcc -Wall<br>  <br>main:main.c libblib.so libalib.so<br>    $(CC) $&lt; -o $@ -lblib -L.<br>  <br>libblib.so:blib.o libalib.so<br>    $(CC) -shared -o $@ $&lt; -lalib -L.<br>  <br>blib.o:blib.c<br>    $(CC) -fPIC -c $&lt;<br>  <br>libalib.so:alib.o<br>    $(CC) -shared -o $@ $&lt; -L.<br>  <br>alib.o:alib.c<br>    $(CC) -fPIC -c $&lt;<br>  <br>.PHONY:<br>clean:<br>    rm -f *.o main *.so<br>  <br><span class="hljs-comment">/*---------------------------------------------------*/</span><br></code></pre></td></tr></table></figure><p>编写完程序后，输入make进行编译，结果如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs BASH">gcc -Wall -fPIC -c blib.c<br>gcc -Wall -fPIC -c alib.c<br>gcc -Wall -shared -o libalib.so alib.o -L.<br>gcc -Wall -shared -o libblib.so blib.o -lalib -L.<br>gcc -Wall main.c -o main -lblib -L.<br>/usr/bin/ld: warning: libalib.so, needed by ./libblib.so, not found (try using -rpath or -rpath-link)<br>/usr/bin/ld: ./libblib.so: undefined reference to `afunc<span class="hljs-string">&#x27;</span><br><span class="hljs-string">collect2: error: ld returned 1 exit status</span><br><span class="hljs-string">make: *** [Makefile:4: main] Error 1</span><br></code></pre></td></tr></table></figure><p>为什么会出现这个错误呢？</p><p>我的理解是，链接器在链接可执行程序的时候会进行一次运行时（RUNTIME）查找，并主动按照顺序检查所依赖共享库中的符号，如果它依赖的共享库同时依赖了其他的模块，那么它会沿着这样的依赖路径一直查找下去。如果发现有符号未定义，链接器就会报错终止，所以对于我们的例子，main 调用了 bfunc，bfunc 中调用了 afunc，那么在链接生成 main 的时候，链接器必须知道 afunc 是否定义，而我们在成功生成 libalib.so 和 libblib.so 后，由于并未设定程序运行时查找路径，所以 libalib.so 找不到 libblib.so，所以 main 无法确定 afunc 是否定义，所以有了以上报错。</p><p>那么如何解决该问题？方法有这么几种：</p><ol><li>最简单的方法就是先设置环境变量，指定运行时库目录位置，直接执行 export LD_LIBRARY_PATH&#x3D;xxx，然后再进行链接；</li><li>将运行时的共享库搜索目录 &#x2F;etc&#x2F;ld.so.conf.d&#x2F; 写入一个配置文件 xxx.conf，在这个文件里指定要搜索的目录，然后执行 ldconfig，这样会将你指定的目录记录到系统全局的目录表里，任何一个共享库都会搜索你指定的目录；</li><li>链接选项添加 -Wl,-unresolved-symbols&#x3D;ignore-in-shared-libs 忽略该错误，这样可以正常生成可执行程序，但是程序运行阶段依旧要解决找不到共享库的问题；</li><li>采用提示的 -Wl,-rpath&#x3D;xxx 指定运行时查找路径，链接器会将该路径写到应用程序，在运行时会优先查找设定的路径；</li><li>采用提示的 -Wl,-rpath-link&#x3D;xxx 指定运行时查找路径，链接器仅在链接阶段进行查找，并不会将该路径记录到应用程序；</li><li>如果依赖的共享库数量较少，可以让应用程序依赖所有的直接、间接的共享库。</li></ol>]]></content>
    
    
    <categories>
      
      <category>软件开发总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Deb 打包流程</title>
    <link href="/08/10/2020/linux-deb-pkg/"/>
    <url>/08/10/2020/linux-deb-pkg/</url>
    
    <content type="html"><![CDATA[<p>Debian 系列及分支的安装包（.deb）的打包流程</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>准备打包的二进制文件</li><li>建立一个虚拟根目录，里面包含 DEBIAN 目录和软件安装路径，如下所示：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs BASH">soft-name<br>    |--DEBIAN<br>    |       |--control<br>    |       |--postinst<br>    |       |--postrm<br>    |       |--preinst<br>    |       |--prerm<br>    |       |--copyright<br>    |<br>    |--opt<br>        |--softposition<br></code></pre></td></tr></table></figure><p>control 主要用来描述软件的版本，名称等详细信息，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs BASH">Package:<br>Version:<br>Description:<br>Section:<br>Priority:<br>Architecture:<br>Installed-Size:<br>Depends:<br>Pre-Depends:<br>Maintainer:<br></code></pre></td></tr></table></figure><ul><li>Package – 软件包名称</li><li>Version – 版本号</li><li>Description – 软件描述</li><li>Section – 软件类型 utils, net, mail, text, x11</li><li>Priority – 软件对系统的重要程度，required, standard, optional, extra 等</li><li>Architecture – 软件支持的平台，如 amd64 arm64 等</li><li>Installed-Size – 软件尺寸</li><li>Depends – 软件依赖的其他软件和库文件等，多个文件用逗号隔开</li><li>Pre-Depends – 安装软件前需要安装的库或软件</li><li>Maintainer – 打包者信息或者联系方式</li></ul><p>安装过程中各个脚本的调用次序如下, 这些脚本均为 bash shell：</p><ul><li>preinst 文件于软件包安装之前会被调用</li><li>postinst 文件于软件包安装之后被调用</li><li>prerm 文件于软件包卸载之前调用</li><li>postrm 文件于软件包卸载之后调用</li></ul><h2 id="运行打包命令"><a href="#运行打包命令" class="headerlink" title="运行打包命令"></a>运行打包命令</h2><p>编写完脚本之后，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">dpkg-deb -b soft-name soft-name.deb<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Rpm 打包流程</title>
    <link href="/08/10/2020/linux-rpm-pkg/"/>
    <url>/08/10/2020/linux-rpm-pkg/</url>
    
    <content type="html"><![CDATA[<p>RedHat 系列及分支的安装包（.rpm）的打包流程</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>因为打 RPM 包需要 rpmbuild 命令，所以需要先安装 rpmbuild 相应工具，安装过程可在网上查找；</li><li>输入命令 rpmbuild xx.spec 即可自动在当前用户的 $HOME 目录下创建 RPM 相关的文件夹，也可手动创建。</li></ol><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">rpmbuild xx.spec<br></code></pre></td></tr></table></figure><p>命令运行后，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">tree ~/rpmbuild/<br></code></pre></td></tr></table></figure><p>即可显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs BASH">rpmbuild/<br>├── BUILD<br>├── BUILDROOT<br>├── RPMS<br>├── SOURCES<br>├── SPECS<br>└── SRPMS<br></code></pre></td></tr></table></figure><ul><li>BUILD：源码包被解压至此，并在该目录的子目录完成编译，宏为 %_builddir</li><li>BUILDROOT：保存 %install 阶段安装的文件，宏为 %_buildrootdir</li><li>RPMS：生成&#x2F;保存二进制 RPM 包，宏为 %_rpmdir</li><li>SOURCES：保存源码包（如 .tar 包）和所有 patch 补丁，宏为 %_sourcedir</li><li>SPECS：保存 RPM 包配置（.spec）文件，宏为 %_specdir</li><li>SRPMS：生成&#x2F;保存源码 RPM 包(SRPM)，宏为 %_srcrpmdir</li><li>~&#x2F;rpmbuild 的宏为 %_topdir</li></ul><h2 id="编辑-SPEC-文件"><a href="#编辑-SPEC-文件" class="headerlink" title="编辑 SPEC 文件"></a>编辑 SPEC 文件</h2><ol><li>运行以下命令创建 .spec 文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">rpmdev-newspec xxx.spec<br></code></pre></td></tr></table></figure><ol start="2"><li>将 SPEC 文件放在 ~rpmbuild&#x2F;SPECS&#x2F; 下面，然后编辑 SPEC 文件，如下所示：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs BASH">Name:　　　　<span class="hljs-comment">#软件名称</span><br>Version:　　<span class="hljs-comment">#版本号</span><br>Release:　　<span class="hljs-comment">#发布编码</span><br>Summary:　　<span class="hljs-comment">#简要说明</span><br>License:　　<span class="hljs-comment">#协议版本</span><br>URL:<br>Source0:　　<span class="hljs-comment">#源码包</span><br>%description<br><span class="hljs-comment">#描述</span><br><br>%prep<br><span class="hljs-comment">#预处理</span><br><br>%build<br><span class="hljs-comment">#编译</span><br><br>%pre<br><span class="hljs-comment">#安装前</span><br><br>%install<br><span class="hljs-comment">#安装</span><br><br>%post<br><span class="hljs-comment">#安装后</span><br><br>%files<br><span class="hljs-comment">#安装的文件列表</span><br><br>%clean<br><span class="hljs-comment">#清理临时文件</span><br><br>%preun<br><span class="hljs-comment">#卸载前</span><br><br>%postun<br><span class="hljs-comment">#卸载后</span><br><br>%changelog<br><span class="hljs-comment">#修改历史</span><br>* Fri Aug  7 2020 <br>-<br></code></pre></td></tr></table></figure><h2 id="安装的各个阶段说明"><a href="#安装的各个阶段说明" class="headerlink" title="安装的各个阶段说明"></a>安装的各个阶段说明</h2><ul><li>%prep阶段 - 预处理，主要对源代码包进行解压和打补丁<br>  一般使用  %setup  -c 或者 %setup -q 命令来解压源码包，直接会将文件解压到%{_builddir}</li><li>%build阶段 - 对源代码包进行编译<br>  编译阶段，非 GNU configure 配置的程序可以不关注这个阶段</li><li>%install阶段 - 将软件安装到虚拟根目录, 同时 Install 阶段也有如下阶段<ul><li>%pre阶段 - 安装前  <blockquote><p>$1 &#x3D;&#x3D; 1 代表安装<br>$1 &#x3D;&#x3D; 2 代表升级  </p></blockquote></li><li>%post阶段 - 安装后  <blockquote><p>$1 &#x3D;&#x3D; 1 代表安装<br>$1 &#x3D;&#x3D; 2 代表升级  </p></blockquote></li><li>%preun阶段 - 卸载前  <blockquote><p>$1 &#x3D;&#x3D; 0 代表卸载<br>$1 &#x3D;&#x3D; 1 代表升级  </p></blockquote></li><li>%postun阶段 - 卸载后  <blockquote><p>$1 &#x3D;&#x3D; 0 代表卸载<br>$1 &#x3D;&#x3D; 1 代表升级<br>  这个阶段主要从 %{_builddir} 复制相关文件到 %{buildroot} （虚拟根目录）目录，如下所示：<br>rm -rf $RPM_BUILD_ROOT<br>cp -rf xxx $RPM_BUILD_ROOT</p></blockquote></li></ul></li><li>files 阶段-列出被打包的文件和目录<br>  首先要设定默认权限，同时要列出打包的目录和文件，设定默认权限的命令如下：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">%defattr(&lt;文件权限&gt;, &lt;用户&gt;, &lt;用户组&gt;, &lt;目录权限&gt;)<br></code></pre></td></tr></table></figure>  第 4 个参数通常会省略。常规用法为 %defattr(-,root,root,-)，其中 “-” 表示默认权限。<br>  在列出文件的目录时，尽量使用内建宏来代替目录名。</li></ul><h3 id="常用的内建宏"><a href="#常用的内建宏" class="headerlink" title="常用的内建宏"></a>常用的内建宏</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs BASH">%&#123;_sysconfdir&#125;        /etc<br>%&#123;_prefix&#125;            /usr<br>%&#123;_exec_prefix&#125;       %&#123;_prefix&#125;<br>%&#123;_bindir&#125;            %&#123;_exec_prefix&#125;/bin<br>%&#123;_lib&#125;               lib (lib64 on 64bit systems)<br>%&#123;_libdir&#125;            %&#123;_exec_prefix&#125;/%&#123;_lib&#125;<br>%&#123;_libexecdir&#125;        %&#123;_exec_prefix&#125;/libexec<br>%&#123;_sbindir&#125;           %&#123;_exec_prefix&#125;/sbin<br>%&#123;_sharedstatedir&#125;    /var/lib<br>%&#123;_datadir&#125;           %&#123;_prefix&#125;/share<br>%&#123;_includedir&#125;        %&#123;_prefix&#125;/include<br>%&#123;_oldincludedir&#125;     /usr/include<br>%&#123;_infodir&#125;           /usr/share/info<br>%&#123;_mandir&#125;            /usr/share/man<br>%&#123;_localstatedir&#125;     /var<br>%&#123;_initddir&#125;          %&#123;_sysconfdir&#125;/rc.d/init.d <br>%&#123;_topdir&#125;            %&#123;getenv:HOME&#125;/rpmbuild<br>%&#123;_builddir&#125;          %&#123;_topdir&#125;/BUILD<br>%&#123;_rpmdir&#125;            %&#123;_topdir&#125;/RPMS<br>%&#123;_sourcedir&#125;         %&#123;_topdir&#125;/SOURCES<br>%&#123;_specdir&#125;           %&#123;_topdir&#125;/SPECS<br>%&#123;_srcrpmdir&#125;         %&#123;_topdir&#125;/SRPMS<br>%&#123;_buildrootdir&#125;      %&#123;_topdir&#125;/BUILDROOT<br>%&#123;_var&#125;               /var<br>%&#123;_tmppath&#125;           %&#123;_var&#125;/tmp<br>%&#123;_usr&#125;               /usr<br>%&#123;_usrsrc&#125;            %&#123;_usr&#125;/src<br>%&#123;_docdir&#125;            %&#123;_datadir&#125;/doc<br>%&#123;buildroot&#125;          %&#123;_buildrootdir&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;.%&#123;_arch&#125;<br><span class="hljs-variable">$RPM_BUILD_ROOT</span>       %&#123;buildroot&#125;<br></code></pre></td></tr></table></figure><ul><li>%clean阶段 - 完成后的一些清理工作<br>  主要是清理 %{_builddir}和%{_buildrootdir}两个目录里的中间文件</li><li>%changelog阶段 – 主要记录每次打包时的修改日志<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs BASH">%changelog<br>* Fri Aug  7 2020 - Your Name &lt;youremail@xxx.xxx&gt; - Release<br>- Update log1 <br>* Fri Aug  7 2020 - Your Name &lt;youremail@xxx.xxx&gt; - Release<br>- Update log2<br></code></pre></td></tr></table></figure></li></ul><h2 id="运行-RPMBUILD-命令完成打包"><a href="#运行-RPMBUILD-命令完成打包" class="headerlink" title="运行 RPMBUILD 命令完成打包"></a>运行 RPMBUILD 命令完成打包</h2><p>在 SPEC 目录下执行 rpmbuild -xx xxx.spec 命令完成打包，rpmbuild 命令选项如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-comment">#rpmbuild</span><br>-bp 预处理<br>-bc 编译<br>-bi 编译并安装<br>-bl 检验文件是否齐全<br>-ba 编译后做成*.rpm和src.rpm<br>-bb 编译后做成*.rpm<br>-bs 只做成*.src.rpm<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件开发总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
